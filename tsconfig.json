{
    "compilerOptions": {
        "outDir": "./build", // Папка для выходных файлов
        "module": "es2022", // указываем, какой модульный стандарт будет использоваться при компиляции. ES6 позволяет использовать import и export для работы с модулями.
        "target": "ES5", // указываем, в какой стандарт JavaScript будет компилироваться TypeScript код. ES5 — для совместимости со старыми браузерами.
        "jsx": "react-jsx", // указываем, что TypeScript должен компилировать JSX-синтаксис в вызовы React.createElement
        "allowJs": true, // позволяем обрабатывать ts компилятору js файлы (полезно при постепенной миграции на ТС)
        "moduleResolution": "node", // позволяет TypeScript использовать алгоритм разрешения модулей, аналогичный тому, который используется в Node.js. Это упрощает импорт модулей и делает код более совместимым с экосистемой Node.js, что полезно при работе с библиотеками и пакетами, установленными через npm
        "esModuleInterop": true, // включаем поддержку для совместимости между CommonJS и ES6 модулями. Позволяет использовать синтаксис импорта ES6 для модулей, экспортируемых с помощью CommonJS
        "allowSyntheticDefaultImports": true, // Эта настройка позволяет импортировать модули, которые не имеют экспортов по умолчанию, как если бы они их имели. Например, полезно для библиотек.
        "noImplicitAny": true, // не забываем указывать тип
        "baseUrl": "./src/",
        "paths": {
          "@app": ["app"],
          "@pages": ["pages"],
          "@widgets": ["widgets"],
          "@features": ["features"],
          "@entities": ["entities"],
          "@shared": ["shared"],
        },
    },
    "ts-node": {
      "compilerOptions": {
        "module": "CommonJS" // определяем, как будет выполняться TypeScript-код непосредственно в Node.js без предварительной компиляции в JavaScript
      }
    }
}